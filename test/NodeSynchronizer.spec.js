// Generated by CoffeeScript 1.6.3
(function() {
  var _this = this;

  describe('NodeSynchronizer', function() {
    var assertHasIterationEqual, nextUntilEnd;
    nextUntilEnd = function(iter) {
      var names;
      names = [];
      names.push(iter.node.name);
      while (iter.hasNext()) {
        iter.next();
        names.push(iter.node.name);
      }
      return names;
    };
    assertHasIterationEqual = function(tree, expected) {
      var names;
      names = nextUntilEnd(tree.iterator());
      return assert.deepEqual(names, expected);
    };
    describe('identical', function() {
      it('single node', function() {
        var dest, src;
        dest = new Node("A");
        src = new Node("A");
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["A"]);
        return assertHasIterationEqual(src, ["A"]);
      });
      return it('multi-level, same size', function() {
        var dest, src;
        dest = new Node("A", new Node("B"));
        src = new Node("A", new Node("B"));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["A", "B"]);
        return assertHasIterationEqual(src, ["A", "B"]);
      });
    });
    return describe('different', function() {
      it('single node', function() {
        var dest, src;
        dest = new Node("A");
        src = new Node("B");
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["B"]);
        return assertHasIterationEqual(src, ["B"]);
      });
      it('multi-level, totally different, same size', function() {
        var dest, src;
        dest = new Node("A", new Node("B"));
        src = new Node("C", new Node("D"));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["C", "D"]);
        return assertHasIterationEqual(src, ["C", "D"]);
      });
      it('multi-level, totally different, src bigger', function() {
        var dest, src;
        dest = new Node("A", new Node("B"));
        src = new Node("C", new Node("D", new Node("E")));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["C", "D", "E"]);
        return assertHasIterationEqual(src, ["C", "D", "E"]);
      });
      it('multi-level, totally different, dest bigger', function() {
        var dest, src;
        dest = new Node("A", new Node("B", new Node("C")));
        src = new Node("D", new Node("E", new Node("F")));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["D", "E", "F"]);
        return assertHasIterationEqual(src, ["D", "E", "F"]);
      });
      it('multi-level, shared prefix, same size', function() {
        var dest, src;
        dest = new Node("A", new Node("B", new Node("C")));
        src = new Node("A", new Node("D", new Node("E")));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["A", "D", "E"]);
        return assertHasIterationEqual(src, ["A", "D", "E"]);
      });
      it('multi-level, shared prefix, dest bigger', function() {
        var dest, src;
        dest = new Node("A");
        src = new Node("A", new Node("D", new Node("E")));
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["A", "D", "E"]);
        return assertHasIterationEqual(src, ["A", "D", "E"]);
      });
      return it('multi-level, shared prefix, src bigger', function() {
        var dest, src;
        dest = new Node("A", new Node("B", new Node("C")));
        src = new Node("A");
        new NodeSynchronizer().syncUp(dest.iterator(), src.iterator());
        assertHasIterationEqual(dest, ["A"]);
        return assertHasIterationEqual(src, ["A"]);
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=NodeSynchronizer.spec.map
*/
