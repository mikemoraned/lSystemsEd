// Generated by CoffeeScript 1.6.3
(function() {
  var _this = this;

  describe('Node', function() {
    var assertHasIterationEqual, nextUntilEnd;
    nextUntilEnd = function(iter) {
      var names;
      names = [];
      names.push(iter.node.name);
      while (iter.hasNext()) {
        iter.next();
        names.push(iter.node.name);
      }
      return names;
    };
    assertHasIterationEqual = function(tree, expected) {
      var names;
      names = nextUntilEnd(tree.iterator());
      return assert.deepEqual(names, expected);
    };
    describe('read-only iteration', function() {
      it('single node', function() {
        var tree;
        tree = new Node("A");
        return assertHasIterationEqual(tree, ["A"]);
      });
      return it('non-empty, multi-level tree', function() {
        var tree;
        tree = new Node("A", new Node("B", new Node("C")));
        return assertHasIterationEqual(tree, ["A", "B", "C"]);
      });
    });
    describe('replacement', function() {
      it('single node, single node replacement', function() {
        var iter, tree;
        tree = new Node("A");
        iter = tree.iterator();
        iter.replaceWith(new Node("B"));
        assert.deepEqual(nextUntilEnd(iter), ["B"]);
        return assertHasIterationEqual(tree, ["B"]);
      });
      it('single node, multi-level replacement', function() {
        var iter, list;
        list = new Node("A");
        iter = list.iterator();
        iter.replaceWith(new Node("B", new Node("C")));
        assert.deepEqual(nextUntilEnd(iter), ["B", "C"]);
        return assertHasIterationEqual(list, ["B", "C"]);
      });
      it('multi-level list, single-node replacement, in middle', function() {
        var iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        iter.replaceWith(new Node("D"));
        assert.deepEqual(nextUntilEnd(iter), ["D"]);
        return assertHasIterationEqual(list, ["A", "D"]);
      });
      return it('multi-level list, multi-level replacement, in middle', function() {
        var iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        iter.replaceWith(new Node("D", new Node("E")));
        assert.deepEqual(nextUntilEnd(iter), ["D", "E"]);
        return assertHasIterationEqual(list, ["A", "D", "E"]);
      });
    });
    describe('append', function() {
      it('single node, single node append', function() {
        var iter, tree;
        tree = new Node("A");
        iter = tree.iterator();
        iter.append(new Node("B"));
        assert.deepEqual(nextUntilEnd(iter), ["A", "B"]);
        return assertHasIterationEqual(tree, ["A", "B"]);
      });
      it('single node, multi-level append', function() {
        var iter, list;
        list = new Node("A");
        iter = list.iterator();
        iter.append(new Node("B", new Node("C")));
        assert.deepEqual(nextUntilEnd(iter), ["A", "B", "C"]);
        return assertHasIterationEqual(list, ["A", "B", "C"]);
      });
      it('multi-level list, single-node append, in middle', function() {
        var a, iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        a = function() {
          return iter.append(new Node("D"));
        };
        assert["throw"](a, /illegal operation/);
        assert.deepEqual(nextUntilEnd(iter), ["B", "C"]);
        return assertHasIterationEqual(list, ["A", "B", "C"]);
      });
      return it('multi-level list, multi-level append, in middle', function() {
        var a, iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        a = function() {
          return iter.append(new Node("D", new Node("E")));
        };
        assert["throw"](a, /illegal operation/);
        assert.deepEqual(nextUntilEnd(iter), ["B", "C"]);
        return assertHasIterationEqual(list, ["A", "B", "C"]);
      });
    });
    return describe('cut', function() {
      it('single node, cut', function() {
        var iter, tree;
        tree = new Node("A");
        iter = tree.iterator();
        iter.append(new Node("B"));
        assert.deepEqual(nextUntilEnd(iter), ["A", "B"]);
        return assertHasIterationEqual(tree, ["A", "B"]);
      });
      it('multi-level list, cut after start', function() {
        var iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.cut();
        assert.deepEqual(nextUntilEnd(iter), ["A"]);
        return assertHasIterationEqual(list, ["A"]);
      });
      it('multi-level list, cut in middle', function() {
        var iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        iter.cut();
        assert.deepEqual(nextUntilEnd(iter), ["B"]);
        return assertHasIterationEqual(list, ["A", "B"]);
      });
      return it('multi-level list, cut at end', function() {
        var iter, list;
        list = new Node("A", new Node("B", new Node("C")));
        iter = list.iterator();
        iter.next();
        iter.next();
        iter.cut();
        assert.deepEqual(nextUntilEnd(iter), ["C"]);
        return assertHasIterationEqual(list, ["A", "B", "C"]);
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=Node.spec.map
*/
