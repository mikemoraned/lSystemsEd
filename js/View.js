// Generated by CoffeeScript 1.6.3
(function() {
  var InstructionVisitor, Link, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Link = (function() {
    function Link(startParticle, extent, direction, nextLinks) {
      this.startParticle = startParticle;
      this.extent = extent;
      this.direction = direction;
      this.nextLinks = nextLinks;
      this.endParticle = __bind(this.endParticle, this);
    }

    Link.prototype.endParticle = function() {
      return new Particle(this.startParticle.pos.add(this.direction.scale(this.extent)));
    };

    return Link;

  })();

  InstructionVisitor = (function() {
    function InstructionVisitor(origin) {
      this.origin = origin;
      this.visitNested = __bind(this.visitNested, this);
      this.visitForward = __bind(this.visitForward, this);
      this.nextStartParticle = new Particle(this.origin);
      this.direction = new Vec2(0.0, -1.0);
      this.composite = null;
      this.parent = null;
      this.stride = 20.0;
    }

    InstructionVisitor.prototype.visitForward = function(extent) {
      var link;
      if (this.parent != null) {
        link = new Link(this.parent.endParticle(), extent * this.stride, this.direction, []);
        this.parent.nextLinks.push(link);
        this.parent = link;
      } else {
        this.parent = new Link(new Particle(this.origin), extent * this.stride, this.direction, []);
      }
      if (this.composite == null) {
        this.composite = new VerletJS.Composite();
      }
      return this.composite.particles.push(this.parent.startParticle);
    };

    InstructionVisitor.prototype.visitNested = function(nested) {
      var instruction, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nested.length; _i < _len; _i++) {
        instruction = nested[_i];
        _results.push(instruction.accept(this));
      }
      return _results;
    };

    return InstructionVisitor;

  })();

  View = (function() {
    function View(model, id) {
      this.model = model;
      this._onEvaluationChange = __bind(this._onEvaluationChange, this);
      this._loop = __bind(this._loop, this);
      this._setup(id);
      this.model.evaluated.subscribe(this._onEvaluationChange);
    }

    View.prototype._setup = function(id) {
      var canvas, dpr, height, width;
      canvas = document.getElementById(id);
      width = parseInt(canvas.style.width);
      height = parseInt(canvas.style.height);
      dpr = window.devicePixelRatio || 1;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.getContext("2d").scale(dpr, dpr);
      this.sim = new VerletJS(width, height, canvas);
      this.sim.friction = 0.3;
      this.sim.gravity = new Vec2(0.0, 0.0);
      this.origin = new Vec2(width / 2, 3 * height / 4);
      this._onEvaluationChange(this.model.evaluated());
      return this._loop();
    };

    View.prototype._loop = function() {
      this.sim.frame(16);
      this.sim.draw();
      return window.requestAnimFrame(this._loop);
    };

    View.prototype._onEvaluationChange = function(change) {
      var visitor;
      console.dir(change);
      this.newLinks = [];
      visitor = new InstructionVisitor(this.origin);
      change.accept(visitor);
      if (visitor.composite != null) {
        return this.sim.composites.push(visitor.composite);
      }
    };

    return View;

  })();

  window.View = View;

}).call(this);

/*
//@ sourceMappingURL=View.map
*/
