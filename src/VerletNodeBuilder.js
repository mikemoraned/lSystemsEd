// Generated by CoffeeScript 1.6.3
(function() {
  var VerletLink, VerletNodeBuilder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  VerletLink = (function() {
    function VerletLink(startPos, endPos, color) {
      this.color = color;
      this.draw = __bind(this.draw, this);
      this.addToComposite = __bind(this.addToComposite, this);
      this.start = new Particle(startPos);
      this.end = new Particle(endPos);
      this.end.link = this;
    }

    VerletLink.prototype.addToComposite = function(composite) {
      return composite.particles.push(this.end);
    };

    VerletLink.prototype.draw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.end.pos.x, this.end.pos.y, 2, 0, 2 * Math.PI);
      ctx.fillStyle = this.color;
      ctx.fill();
      ctx.beginPath();
      ctx.moveTo(this.start.pos.x, this.start.pos.y);
      ctx.lineTo(this.end.pos.x, this.end.pos.y);
      ctx.strokeStyle = "gray";
      return ctx.stroke();
    };

    return VerletLink;

  })();

  VerletNodeBuilder = (function() {
    function VerletNodeBuilder(origin, root, sim) {
      this.root = root;
      this.sim = sim;
      this._drawParticles = __bind(this._drawParticles, this);
      this.visitNested = __bind(this.visitNested, this);
      this.visitForward = __bind(this.visitForward, this);
      this.position = origin;
      this.stride = 20.0;
      this.direction = new Vec2(0.0, -1.0);
    }

    VerletNodeBuilder.prototype.visitForward = function(name, color, extent) {
      var end, link, node, start;
      node = new Node(name);
      start = this.position;
      end = this.position.add(this.direction.scale(extent * this.stride));
      link = new VerletLink(start, end, color);
      node.link = link;
      this.composite.drawParticles = this._drawParticles;
      link.addToComposite(this.composite);
      this.root.nextLink = link;
      this.root = link;
      return this.position = end;
    };

    VerletNodeBuilder.prototype.visitNested = function(nested) {
      var instruction, _i, _len;
      this.composite = new VerletJS.Composite();
      for (_i = 0, _len = nested.length; _i < _len; _i++) {
        instruction = nested[_i];
        instruction.accept(this);
      }
      return this.sim.composites.push(this.composite);
    };

    VerletNodeBuilder.prototype._drawParticles = function(ctx, composite) {
      var particle, _i, _len, _ref, _results;
      _ref = composite.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        if (particle.link != null) {
          _results.push(particle.link.draw(ctx));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return VerletNodeBuilder;

  })();

  window.VerletNodeBuilder = VerletNodeBuilder;

}).call(this);

/*
//@ sourceMappingURL=VerletNodeBuilder.map
*/
