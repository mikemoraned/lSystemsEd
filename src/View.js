// Generated by CoffeeScript 1.6.3
(function() {
  var View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  View = (function() {
    function View(model, id) {
      this.model = model;
      this._removeDeadParticles = __bind(this._removeDeadParticles, this);
      this._removeDeadLinks = __bind(this._removeDeadLinks, this);
      this._onEvaluationChange = __bind(this._onEvaluationChange, this);
      this._loop = __bind(this._loop, this);
      this._setup(id);
      this.model.evaluated.subscribe(this._onEvaluationChange);
    }

    View.prototype._setup = function(id) {
      var canvas, dpr, height, width;
      canvas = document.getElementById(id);
      width = parseInt(canvas.style.width);
      height = parseInt(canvas.style.height);
      dpr = window.devicePixelRatio || 1;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.getContext("2d").scale(dpr, dpr);
      this.sim = new VerletJS(width, height, canvas);
      this.sim.friction = 0.3;
      this.sim.gravity = new Vec2(0.0, 0.0);
      this.origin = new Vec2(width / 2, 3 * height / 4);
      this.root = new Root(this.origin);
      this._onEvaluationChange(this.model.evaluated());
      return this._loop();
    };

    View.prototype._loop = function() {
      this.sim.frame(16);
      this.sim.draw();
      return window.requestAnimFrame(this._loop);
    };

    View.prototype._onEvaluationChange = function(change) {
      var visitor;
      console.dir(change);
      visitor = new InstructionVisitor(this.origin, this.root);
      change.accept(visitor);
      if (visitor.composite != null) {
        this.sim.composites.push(visitor.composite);
      }
      this._removeDeadLinks();
      return this._removeDeadParticles();
    };

    View.prototype._removeDeadLinks = function() {
      var composite, deadLink, _i, _len, _ref, _results;
      _ref = this.sim.composites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        composite = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1,
            _this = this;
          _ref1 = _.chain(composite.particles).filter(function(p) {
            var _ref1;
            return (_ref1 = p.link) != null ? _ref1.dead : void 0;
          }).map(function(p) {
            return p.link;
          }).value();
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            deadLink = _ref1[_j];
            _results1.push(deadLink.unlink());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    View.prototype._removeDeadParticles = function() {
      var composite, _i, _len, _ref,
        _this = this;
      _ref = this.sim.composites;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        composite = _ref[_i];
        console.log("before/after");
        console.dir(composite.particles);
        composite.particles = _.filter(composite.particles, function(p) {
          var _ref1;
          return !((_ref1 = p.link) != null ? _ref1.dead : void 0);
        });
        console.dir(composite.particles);
      }
      return this.sim.composites = _.filter(this.sim.composites, function(c) {
        return c.particles.length > 0;
      });
    };

    return View;

  })();

  window.View = View;

}).call(this);

/*
//@ sourceMappingURL=View.map
*/
